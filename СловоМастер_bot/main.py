from transformers import T5ForConditionalGeneration, T5Tokenizer
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import nest_asyncio
import asyncio
from langdetect import detect, DetectorFactory

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π (Event Loop) –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ asyncio
nest_asyncio.apply()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ langdetect –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
DetectorFactory.seed = 0

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
MODEL_NAME = 'cointegrated/rut5-base-paraphraser'
model = T5ForConditionalGeneration.from_pretrained(MODEL_NAME)
tokenizer = T5Tokenizer.from_pretrained(MODEL_NAME, legacy=False)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
model.eval()

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è
def paraphrase(text, sequences=1, beams=15, grams=4, do_sample=True):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏
    x = tokenizer(text, return_tensors='pt', padding=True).to(model.device)
    max_size = int(x.input_ids.shape[1] * 1.5 + 10)  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
    out = model.generate(**x, encoder_no_repeat_ngram_size=grams,
                         num_beams=beams, max_length=max_size,
                         num_return_sequences=sequences,
                         do_sample=do_sample)
    # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∏—Ö –≤–æ–∑–≤—Ä–∞—Ç
    return tokenizer.batch_decode(out, skip_special_tokens=True)

# –§—É–Ω–∫—Ü–∏—è /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—Å—Ç–∫–∞ –ª—é–±—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = 'waiting_for_text'
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É—é –µ–≥–æ –¥–ª—è –≤–∞—Å.\n\n"
        "üìö –ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )

# –§—É–Ω–∫—Ü–∏—è /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å.\n"
        "2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ 15).\n"
        "3. –Ø –≤–µ—Ä–Ω—É –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "4. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, —è –ø–æ–ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞.\n\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = context.user_data.get('state', 'waiting_for_text')
    user_input = update.message.text

    if state == 'waiting_for_text':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        if len(user_input) > 500:
            await update.message.reply_text("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
        try:
            detected_language = detect(user_input)
            if detected_language != 'ru':  # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —Ä—É—Å—Å–∫–∏–π
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ,")
                return
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        context.user_data['text_to_paraphrase'] = user_input
        context.user_data['state'] = 'waiting_for_options'
        await update.message.reply_text("üî¢ –°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ? (–¥–æ 15)")

    elif state == 'waiting_for_options':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        try:
            sequences = int(user_input)
            if sequences < 1 or sequences > 15:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15.")
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—é
            context.user_data['sequences'] = sequences
            context.user_data['state'] = 'waiting_for_feedback'

            # –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")  # –°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            text_to_paraphrase = context.user_data['text_to_paraphrase']
            paraphrased_texts = paraphrase(text_to_paraphrase, sequences=sequences)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            response = "\n\n".join(paraphrased_texts)
            await update.message.reply_text(f"‚ú® –í–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è:\n{response}")

            # –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω –ª–∏ –æ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await update.message.reply_text("‚ùì –í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç? (–î–∞/–ù–µ—Ç)")
            context.user_data['paraphrased_texts'] = paraphrased_texts  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15.")

    elif state == 'waiting_for_feedback':
        feedback = user_input.lower()
        if feedback == "–¥–∞":
            await update.message.reply_text("üéâ –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.")
            context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            context.user_data['state'] = 'waiting_for_text'  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        elif feedback == "–Ω–µ—Ç":
            await update.message.reply_text("üîÑ –ü–æ–ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...")
            text_to_paraphrase = context.user_data['text_to_paraphrase']
            sequences = context.user_data['sequences']
            paraphrased_texts = paraphrase(text_to_paraphrase, sequences=sequences)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            response = "\n\n".join(paraphrased_texts)
            await update.message.reply_text(f"‚ú® –í–æ—Ç –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è:\n{response}")
            await update.message.reply_text("‚ùì –í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç? (–î–∞/–ù–µ—Ç)")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
async def main():
    # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å
    TOKEN = "7979216405:AAGWpD07_1D9isAXZoIM2TRO_h7sSHGZbFQ"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
